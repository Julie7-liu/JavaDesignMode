组合模式（Composite）:将对象组合成树形结构以表示'部分-整体'的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
场景：需求中体现部分与整体层次的结构时，以及你希望用户可以忽略对象与单个的不同，统一地使用组合结构中的所有对象时，就应该考虑用组合模式了。
好处：定义包含了基本对象的层次结构。基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断的下去，客户代码中，任何用到基本对象的地方都可以使用组合对象了。
              用户是不用关心到底是处理一个叶节点还是处理一个组合组件，也就用不着为定义组写一些选择判断语句了。
              简单地说，组合模式让客户可以一致的使用组合结构和单个对象。
透明方式：在component中声明所有用来管理子对象的方法，其中Add,Remove等，这样实现component接口的所有子类都具备了Add和Remove。这样做的好处就是叶节点和枝节点对于外界没有区别，它们具备完全一致的行为接口。但问题也很明显，因为leaf类本身不具备Add(),Remove()方法的功能，所以实现它是没有意义的。
安全方式：在Component接口中不去声明Add和Remove方法，那么子类的Leaf也就不需要去实现它，而是在Component声明所有用来管理子类对象的方法，不过由于不够透明，所以树叶和树枝类将不具有相同的接口。客户端的调用需要做相应的判断，带来了不便。
