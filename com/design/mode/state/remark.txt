状态模式（state）,当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。
解决的问题：当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。
好处：将与特定状态相关的行为都放入一个对象中，由于所有与状态相关的代码多存在于某个ConcreteState中，所以通过定义新的子类可以很容易地增加新的状态和转换；为了消除庞大的条件分支语句，状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖
场景：当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。
