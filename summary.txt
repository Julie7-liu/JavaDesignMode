六大原则：
一：单一职责原则（SRP）(拍摄UFO)，就一个类而言，应该仅有一个引起它变化的原因。
如果一个类承担的职责过多，就等于把这些指责偶合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这些耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。
软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责
单一职责提高代码的易维护，易扩展，易复用，灵活多样

二：里氏代换原则：一个软件实体如果使用的是一个父类的话，那么一定是用于其子类，而且它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序行为没有变化
只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。
由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。


三：迪米特法则（LoD）(无熟人难办事？)：也叫最少知识原则，如果两个类不必彼此通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。
强调的前提：在类的结构设计上，每一个类都应当尽量降低成员的访问权限。也就是说，一个类包装好自己的private状态，不需要让别的类知道的字段或行为就不要公开。
根本思想：强调类之间的松耦合。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。

四：依赖倒置原则(Dependence Inversion Principle)(会修电脑不会修收音机)
A.高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。
B.抽象不应该依赖于具体实现，具体实现应该依赖于抽象。
依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写是考虑的都是如何针对抽象编程而不是针对细节的编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。

五：合成/聚合复用原则(CARP)：尽量使用合成/聚合，尽量不要使用类继承。
1.合成（Composition）和聚合（Aggregation）都是关联的特殊种类。
2.聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分;合成则是一种强的“拥有”关系，体现了严格地部分和整体的关系，部分和整体的生命周期一样
3.好处：优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上。这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。

六：开放-封闭原则（OCP）(考研求职两不误):是说软件实体（类，模块，函数等等）应该可以扩展，但是不可修改。
特征：1.对于扩展是开放得；2.对于更改是封闭的
在我们最初编写代码时，假设变化不会发生，当变化发生时，我们就创建抽象类来隔离以后发生的同类变化。
精神所在：面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码
核心所在：遵守这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可拓展、可复用、灵活性好。开发人员应该仅对程序中呈现出频繁变化的哪些部分作出抽象，然而，对于应用程序中的每个部分都可以地进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。



模式分组（24个设计模式）：
简单工厂模式（活字印刷），违背了开放-封闭原则不参与分类
一：创建型模式：
为何需要创建型模式：
答：创建型模式隐藏了这些类的实例是如何被创建和放在一起，整个系统关于这些对象所知道的是由抽象类所定义的接口。这样，创建型模式在创建了什么、谁创建它、它是怎么被创建的，以及何时创建这些方面提供了很大的灵活性。
包含模式如下：
1.抽象工厂(就不能不换DB吗？)：提供一个创建一系列或相关依赖对象的接口，而无需指定他们具体的类。
2.建造者(好菜每回味不同)：将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。
*3.工厂方法(雷锋依然在人间)：定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂模式使一个类的实例化延迟到其子类。
4.原型(简历复印)：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
5.单例(有些类也需计划生育)：保证一个类仅有一个实例，并提供一访问它的全局访问点。

二：结构型模式：
1.适配器(在NBA我需要翻译)：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
2.桥接(手机软件何时统一)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。
3.组合(分公司=一部门)：将对象组合成树形结构以表示‘部分-整体’的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。
4.装饰(穿什么有那么重要？)：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更加灵活。
5.*外观(牛市股票还会亏钱)：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
6.享元(项目多也别傻做)：为运用共享技术有效地支持大量细粒度的对象。
7.代理(为别人做嫁衣)：为其他对象提供一种代理以控制对这个对象的访问。

三：行为模式一组：
1.*观察者(老板回来，我不知道)：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。
2.模板方法(考题抄错会作也白搭)：定义一个操作的算法骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重新定义该算法的某些特定步骤。
3.命令(烤羊肉串引来的思考)：将一个请求封装为一个对象，从而是你可用不同的请求对客户进行参数化：可以对请求排队或记录请求日志，以及支持可撤销的操作。
4.状态(无尽加班何时休)：允许一个对象在其内部状态改变时改变它的行为，让对象看起来似乎修改了它的类。
5.职责链(加薪非要老总批？)：使用多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。

四：行为模式二组：
1.解释器(其实你不懂老板的心)：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
2.中介者(世界需要和平)：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使得其耦合松散，并且可以独立地改变他们之间的交互。
3.访问者(男人和女人)：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
4.*策略(商场促销)：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而改变。
5.备忘录(如果再回到从前)：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。
6.迭代器(想走？可以先买票)：提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。


面向对象设计模式体现的就是抽象的思想。
类:是对对象的抽象。
抽象类:是对类的抽象。
接口:是对行为的抽象。